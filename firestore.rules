
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection
    // - Any authenticated user can read any user's profile (for searching/displaying friends).
    // - A user can only create their own document.
    // - A user can only update their own document.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth.uid == userId;
    }

    // Friends Subcollection
    // - A user can only read or delete from their own friends list.
    // - Writes (adding friends) are only allowed from the backend (Cloud Functions),
    //   which operate with admin privileges and thus have request.auth == null.
    //   This forces friend additions to go through the secure `acceptFriendRequest` function.
    match /users/{userId}/friends/{friendId} {
        allow read, delete: if request.auth.uid == userId;
        // Allow writes only from admin/backend services (like Cloud Functions)
        allow write: if request.auth == null;
    }

    // Friend Requests Collection
    // - Users can create requests if the 'fromUserId' is their own.
    // - Only the sender or receiver can read the request.
    // - Only the receiver can update the status (to accept/decline).
    // - Only the sender can delete a pending request (cancel).
    match /friendRequests/{requestId} {
      allow create: if request.auth.uid == request.resource.data.fromUserId;
      allow read: if request.auth.uid == resource.data.fromUserId || request.auth.uid == resource.data.toUserId;
      allow update: if request.auth.uid == resource.data.toUserId; // Only receiver can accept/decline
      allow delete: if request.auth.uid == resource.data.fromUserId; // Only sender can cancel
    }
    
    // Chats Collection
    // - Users can only read or write to chats they are a member of.
    match /chats/{chatId} {
      allow read, write: if request.auth.uid in resource.data.userIds;
    }
  }
}
